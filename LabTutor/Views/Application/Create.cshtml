@model LabTutor.Models.Application
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        margin: 40px 10px;
        padding: 0;
        font-family: "Lucida Grande",Helvetica,Arial,Verdana,sans-serif;
        font-size: 14px;
    }

    #calendar {
        max-width: 900px;
        margin: 0 auto;
    }
</style>

<h2>Create my application</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <div class="form-group">
            @Html.LabelFor(model => model.student.NI, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.student.NI, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.student.NI, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.student.maxHour, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.student.maxHour, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.student.maxHour, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id='calendar'></div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" id="submitAjax" class="btn btn-default">Submit</button>
            </div>
        </div>
    </div>

}


@section Scripts {

    <script>
        var likedList = new Array();
        var dislikedList = new Array();
        var neutralList = new Array();

        @for (int i = 0; i < @Model.classInfo.Count; i++)
        {
            if (!@Model.classInfo[i].myclass)
            {
                @:neutralList.push(@Model.classInfo[i].classId);
            }
        }

        $(document).ready(function () {

            //  $('form').submit(function(e){
            $("#submitAjax").click(function () {
                // e.pre.preventDefault();
                $.ajax({
                    url: "/Application/Create1",
                    data: { likedList: likedList },
                    type: "POST",
                    traditional: true,
                    success: function (data) {

                        $.ajax({
                            url: "/Application/Create2",
                            data: { dislikedList: dislikedList },
                            type: "POST",
                            traditional: true,
                            success: function (data) {

                                $.ajax({
                                    url: "/Application/Create3",
                                    data: { neutralList: neutralList },
                                    type: "POST",
                                    traditional: true,
                                    success: function (data) {

                                        $('form').submit();
                                    }
                                })

                            }
                        })

                    },
                    error: function (data) {
                        alert("error");
                    }
                })
            });

            //  $('#submitAjax1').bind("click", submitAjax);
            $('#calendar').fullCalendar({
                editable: false,
                weekends: false,
                weekNumbers: false,
                minTime: "09:00:00",
                maxTime: "18:00:00",
                firstDay: 1,
                contentHeight: 420,
                defaultView: 'agendaWeek',
                eventLimit: true, // allow "more" link when too many events
                defaultDate: "2016-06-06",

                events: [
                    @for (int i = 0; i < @Model.classInfo.Count; i++)
				{
                    <text>{</text>
				   <text>title: '</text>@Model.classInfo[i].title<text>',</text>
				    <text>start: '</text>@Model.classInfo[i].startTime<text>',</text>
				    <text>end: '</text>@Model.classInfo[i].endTime<text>',</text>
                    <text>id: '</text>@Model.classInfo[i].classId<text>',</text>
				    <text>selected: 'no'</text>

                    if (@Model.classInfo[i].myclass)
                        {
                            <text>, backgroundColor: '#8c8c8c'</text>
                            <text>, myClass: '</text>@Model.classInfo[i].myclass<text>'</text>
                        }

                     <text> }</text>
                    if (i != @Model.classInfo.Count - 1)
                    {<text>,</text>}
                }
                ],

                eventClick: function (calEvent, jsEvent, view) {
                    if (!calEvent.myClass) {
                        //click to like a class
                        if (calEvent.selected === 'no') {
                            $(this).css('background-color', '#86b300');//green
                            calEvent.selected = 'liked';
                            delete neutralList.splice([neutralList.indexOf(calEvent.id)], 1);
                            likedList.push(calEvent.id);
                        }
                        //click to dislike
                        else if (calEvent.selected === 'liked') {
                            $(this).css('background-color', '#ff9933');//orange
                            calEvent.selected = 'disliked';
                            delete likedList.splice([likedList.indexOf(calEvent.id)], 1);
                            dislikedList.push(calEvent.id);
                        }
                        //click to be netural
                        else if (calEvent.selected === 'disliked') {
                            $(this).css('background-color', '#3a87ad');//blue
                            calEvent.selected = 'no';
                            delete dislikedList.splice([dislikedList.indexOf(calEvent.id)], 1);
                            neutralList.push(calEvent.id);
                        }
                    }
                }
            });

        });

    </script>
}
